import java.util.*;

public class sol {
    static int maxcut(int a[], int n, int dp[]) {
        if (n == 0)
            return 0;
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < a.length; i++) {
            if (n - a[i] >= 0) {
                int subAns = 0;
                if (dp[n - a[i]] != -1) {
                    subAns = dp[n - a[i]];

                } else {
                    subAns = maxcut(a, n - a[i], dp);
                }
                if (subAns != Integer.MIN_VALUE && subAns + 1 > ans) {
                    ans = subAns + 1;
                }
            }
        }
        return dp[n]=ans;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int a[] = new int[3];
        for (int i = 0; i < 3; i++) {
            a[i] = sc.nextInt();
        }
        int dp[] = new int[n + 1];
        Arrays.fill(dp, -1);
        dp[0] = 0;

        System.out.println(maxcut(a, n, dp));
    }
}

//Time Complexity O(nlogn)
//Space Complexity o(n)
