// Time Complexity: O(n * m)
// Complexity: O(n * m)

#include <bits/stdc++.h>
using namespace std;
class Solution {
  public:
    void dfs(vector<vector<int>> &visited, vector<vector<int>> &grid, int n, int m, set<vector<int>> &tmp,
        int i, int j, int lI, int lJ)
    {
        if(i<0 || j<0 || i>=n || j>=m) return;
        if(grid[i][j] == 0) return;
        if(visited[i][j] == 1) return;
        visited[i][j] = 1;
        tmp.insert({i-lI,j-lJ});
        dfs(visited, grid, n, m, tmp, i+1, j, lI, lJ);
        dfs(visited, grid, n, m, tmp, i-1, j, lI, lJ);
        dfs(visited, grid, n, m, tmp, i, j+1, lI, lJ);
        dfs(visited, grid, n, m, tmp, i, j-1, lI, lJ);
    }
  
    int countDistinctIslands(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m, 0));
        set<set<vector<int>>> S;
        for(int i = 0;i<n;i++)
        {
            for(int j = 0;j<m;j++)
            {
                if(!visited[i][j] && grid[i][j]==1)
                {
                    int lI = i;
                    int lJ = j;
                    set<vector<int>> tmp;
                    dfs(visited, grid, n, m, tmp, i, j, lI, lJ);
                    S.insert(tmp);
                }
            }
        }
        return S.size();
    }
};


//{ Driver Code Starts.

int main() {

    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> grid(n, vector<int>(m));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        Solution obj;
        cout << obj.countDistinctIslands(grid) << endl;
    }
}